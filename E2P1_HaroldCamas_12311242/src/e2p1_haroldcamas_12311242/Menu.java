/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package e2p1_haroldcamas_12311242;
import java.util.Scanner;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    static Scanner cadena = new Scanner(System.in);
    static ArrayList<Numero> lista = new ArrayList<>();
    
    public String ImprimirArray( ArrayList<Numero> list){
        String cadena = "";
        Numero num;
        for(int i = 0; i < list.size(); i++){
            num = list.get(i);
            cadena += (i+1) + ".) " + num.getNumero() + " base " + num.getBase() + ": " + num.baseToDec(num.getNumero(), num.getBase());
            cadena += "\n";
        }
        return cadena;
    }
    
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Numeros");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Operaciones");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jButton1)
                .addGap(60, 60, 60)
                .addComponent(jButton2)
                .addGap(55, 55, 55)
                .addComponent(jButton3)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Numeros
        this.setVisible(false);
        boolean seguir = true;
        String respuesta = "";
        int opcion = 0;
        
        while(seguir){
            respuesta = JOptionPane.showInputDialog(null, "1.)Añadir\n2.)Eliminar\n3.)Mostrar Numeros\n4.)Menu Principal");
            opcion = Integer.parseInt(respuesta);

            switch(opcion){
                case 1:
                    //Añadir numeros.
                    respuesta = JOptionPane.showInputDialog(null, "Elija el numero que quiere ingresar: ");
                    int numero = Integer.parseInt(respuesta);
                    if (numero <= 1){
                        JOptionPane.showMessageDialog(null, "Tiene que elegir un numero mayor que 1!");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, "Elija en que base guardarlo: ");
                    int base = Integer.parseInt(respuesta);
                    if (base < 2 || base > 35){
                        JOptionPane.showMessageDialog(null, "La base tiene que ser entre 2 y 35!");
                        break;
                    }
                    
                    Numero num = new Numero(base,numero);
                    lista.add(num);
                    JOptionPane.showMessageDialog(null, "Numero añadido con exito!");
                    break;
                    
                case 2:
                    //Eliminar numeros
                    if(lista.size() == 0){
                        JOptionPane.showMessageDialog(null, "No tiene ningun numero guardado!");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija cual numero eliminar:");
                    int indice = Integer.parseInt(respuesta);
                    if(indice <= 0 || indice > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    lista.remove(indice - 1);
                    JOptionPane.showMessageDialog(null, "Numero eliminado con exito!");
                    break;
                    
                case 3:
                    //Muestra los numeros.
                    if(lista.size() == 0){
                        JOptionPane.showMessageDialog(null, "Lista Vacia");
                        break;
                    }
                    JOptionPane.showMessageDialog(null, ImprimirArray(lista));
                    break;
                    
                case 4:
                    //Salir
                    seguir = false;
                    break;
                    
                default:
                    JOptionPane.showMessageDialog(null,"Tiene que elegir una opcion valida!");
                    break;
            }
        }
        this.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Operaciones
        this.setVisible(false);
        boolean seguir = true;
        String respuesta = "";
        int opcion = 0;
        int resultado = 0;
        int indice1;
        int indice2;
        Numero num1;
        Numero num2;
        
        while(seguir){
           respuesta = JOptionPane.showInputDialog(null, "1.)Sumar\n2.)Restar\n3.)Multiplicar\n4.)Mostrar lista\n5.)Menu Principal");
            opcion = Integer.parseInt(respuesta); 
            
            switch(opcion){
                case 1:
                    //Sumar
                    if(lista.size() == 0){
                        JOptionPane.showMessageDialog(null, "No tiene numeros para sumar!");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija su primer numero para sumar:");
                    indice1 = Integer.parseInt(respuesta);
                    if(indice1 <= 0 || indice1 > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija el segundo numero para sumar:");
                    indice2 = Integer.parseInt(respuesta);
                    if(indice2 <= 0 || indice2 > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    num1 = lista.get(indice1 - 1);
                    num2 = lista.get(indice2 - 1);
                    resultado = num1.baseToDec(num1.getNumero(), num1.getBase()) + num2.baseToDec(num2.getNumero(), num2.getBase());
                    int baseR;
                    
                    if(num1.getBase() > num2.getBase()){
                        baseR = num1.getBase();
                    }
                    else{
                        baseR = num2.getBase();
                    }
                    
                    Numero numR = new Numero(baseR,resultado);
                    JOptionPane.showMessageDialog(null, "El resultado es " + numR.getNumero() + " en base " + baseR + ": " + resultado);
                    break;
                    
                case 2:
                    //Restar
                    if(lista.size() == 0){
                        JOptionPane.showMessageDialog(null, "No tiene numeros para restar!");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija su primer numero para restar:");
                    indice1 = Integer.parseInt(respuesta);
                    if(indice1 <= 0 || indice1 > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija el segundo numero para restarle al anterior:");
                    indice2 = Integer.parseInt(respuesta);
                    if(indice2 <= 0 || indice2 > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    num1 = lista.get(indice1 - 1);
                    num2 = lista.get(indice2 - 1);
                    
                    if(num1.baseToDec(num1.getNumero(), num1.getBase()) < num2.baseToDec(num2.getNumero(), num2.getBase())){
                        JOptionPane.showMessageDialog(null, "La diferencia resulta en un negativo y actualmente el sistema no opera con negativos.");
                        break;
                    }
                    
                    resultado = num1.baseToDec(num1.getNumero(), num1.getBase()) - num2.baseToDec(num2.getNumero(), num2.getBase());
                    int baser;
                    
                    if(num1.getBase() > num2.getBase()){
                        baser = num1.getBase();
                    }
                    else{
                        baser = num2.getBase();
                    }
                    
                    Numero numD = new Numero(baser,resultado);
                    JOptionPane.showMessageDialog(null, "El resultado es: " + numD.getNumero() + " en base " + baser + ": " + resultado);
                    break;
                    
                case 3:
                    //Multiplicar
                    if(lista.size() == 0){
                        JOptionPane.showMessageDialog(null, "No tiene numeros para restar!");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija su primer numero para multiplicar:");
                    indice1 = Integer.parseInt(respuesta);
                    if(indice1 <= 0 || indice1 > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    respuesta = JOptionPane.showInputDialog(null, ImprimirArray(lista) + "\nElija el segundo numero para multiplicar:");
                    indice2 = Integer.parseInt(respuesta);
                    if(indice2 <= 0 || indice2 > lista.size()){
                        JOptionPane.showMessageDialog(null, "Elija un numero dentro de la lista");
                        break;
                    }
                    
                    num1 = lista.get(indice1 - 1);
                    num2 = lista.get(indice2 - 1);
                    resultado = num1.baseToDec(num1.getNumero(), num1.getBase()) * num2.baseToDec(num2.getNumero(), num2.getBase());
                    int baseM;
                    
                    if(num1.getBase() > num2.getBase()){
                        baseM = num1.getBase();
                    }
                    else{
                        baseM = num2.getBase();
                    }
                    
                    Numero numM = new Numero(baseM,resultado);
                    JOptionPane.showMessageDialog(null, "El resultado es: " + numM.getNumero() + " en base " + baseM + ": " + resultado);
                    break;
                    
                case 4:
                    //Muestra los numeros.
                    if(lista.size() == 0){
                        JOptionPane.showMessageDialog(null, "Lista Vacia");
                        break;
                    }
                    JOptionPane.showMessageDialog(null, ImprimirArray(lista));
                    break;
                    
                case 5:
                    seguir = false;
                    break;
                    
                default:
                    JOptionPane.showMessageDialog(null,"Tiene que elegir una opcion valida!");
                    break;
            }
        }
        this.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Salir
        this.setVisible(false);
        JOptionPane.showMessageDialog(null, "Felicidades, oficialmente ha superado el laboratorio de Programacion 1!");
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration//GEN-END:variables
}
